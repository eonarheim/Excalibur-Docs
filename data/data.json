{
    "project": {},
    "files": {
        "..\\ts\\Algebra.ts": {
            "name": "..\\ts\\Algebra.ts",
            "modules": {},
            "classes": {
                "Point": 1,
                "Vector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\ts\\Camera.ts": {
            "name": "..\\ts\\Camera.ts",
            "modules": {},
            "classes": {
                "Camera": 1,
                "SideCamera": 1,
                "TopCamera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\ts\\Core.ts": {
            "name": "..\\ts\\Core.ts",
            "modules": {},
            "classes": {
                "Color": 1,
                "InputKey": 1,
                "DisplayMode": 1,
                "Timer": 1,
                "Engine": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\ts\\Drawing.ts": {
            "name": "..\\ts\\Drawing.ts",
            "modules": {},
            "classes": {
                "IDrawable": 1,
                "SpriteSheet": 1,
                "SpriteFont": 1,
                "ISpriteEffect": 1,
                "Effects.Grayscale": 1,
                "Effects.Invert": 1,
                "Effects.Opacity": 1,
                "Sprite": 1,
                "Animation": 1,
                "Polygon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\ts\\Entities.ts": {
            "name": "..\\ts\\Entities.ts",
            "modules": {},
            "classes": {
                "Scene": 1,
                "Side": 1,
                "Actor": 1,
                "Label": 1,
                "Trigger": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\ts\\Events.ts": {
            "name": "..\\ts\\Events.ts",
            "modules": {},
            "classes": {
                "EventType": 1,
                "EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\ts\\Loader.ts": {
            "name": "..\\ts\\Loader.ts",
            "modules": {},
            "classes": {
                "ILoadable": 1,
                "Texture": 1,
                "Sound": 1,
                "Loader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\ts\\Log.ts": {
            "name": "..\\ts\\Log.ts",
            "modules": {},
            "classes": {
                "LogLevel": 1,
                "Logger": 1,
                "IAppender": 1,
                "ConsoleAppender": 1,
                "ScreenAppender": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\ts\\Particles.ts": {
            "name": "..\\ts\\Particles.ts",
            "modules": {},
            "classes": {
                "ParticleEmitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\ts\\Promises.ts": {
            "name": "..\\ts\\Promises.ts",
            "modules": {},
            "classes": {
                "PromiseState": 1,
                "Promise<T>": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\ts\\Util.ts": {
            "name": "..\\ts\\Util.ts",
            "modules": {},
            "classes": {
                "Class": 1,
                "Collection<T>": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Point": {
            "name": "Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Algebra.ts",
            "line": 2,
            "description": "A simple 2D point on a plane",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "X coordinate of the point",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y coordinate of the point",
                    "type": "Number"
                }
            ]
        },
        "Vector": {
            "name": "Vector",
            "shortname": "Vector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Algebra.ts",
            "line": 23,
            "description": "A 2D vector on a plane.",
            "extends": "Point",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "X component of the Vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y component of the Vector",
                    "type": "Number"
                }
            ]
        },
        "Camera": {
            "name": "Camera",
            "shortname": "Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Camera.ts",
            "line": 6,
            "description": "A base implementation of a camera. This class is meant to be extended.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "engine",
                    "description": "Reference to the current engine",
                    "type": "Engine"
                }
            ]
        },
        "SideCamera": {
            "name": "SideCamera",
            "shortname": "SideCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Camera.ts",
            "line": 88,
            "description": "An extension of BaseCamera that is locked vertically; it will only move side to side.",
            "extends": "BaseCamera",
            "is_constructor": 1,
            "params": [
                {
                    "name": "engine",
                    "description": "Reference to the current engine",
                    "type": "Engine"
                }
            ]
        },
        "TopCamera": {
            "name": "TopCamera",
            "shortname": "TopCamera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Camera.ts",
            "line": 103,
            "description": "An extension of BaseCamera that is locked to an actor; the actor will appear in the center of the screen.",
            "extends": "BaseCamera",
            "is_constructor": 1,
            "params": [
                {
                    "name": "engine",
                    "description": "Reference to the current engine",
                    "type": "Engine"
                }
            ]
        },
        "Color": {
            "name": "Color",
            "shortname": "Color",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Core.ts",
            "line": 131,
            "description": "Creates a new instance of Color from an r, g, b, a",
            "is_constructor": 1,
            "params": [
                {
                    "name": "r",
                    "description": "The red component of color (0-255)",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "The green component of color (0-255)",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "The blue component of color (0-255)",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "The alpha component of color (0-1.0)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ]
        },
        "InputKey": {
            "name": "InputKey",
            "shortname": "InputKey",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Core.ts",
            "line": 206,
            "description": "Enum representing input key codes"
        },
        "DisplayMode": {
            "name": "DisplayMode",
            "shortname": "DisplayMode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Core.ts",
            "line": 398,
            "description": "Enum representing the different display modes available to Excalibur"
        },
        "Timer": {
            "name": "Timer",
            "shortname": "Timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Core.ts",
            "line": 434,
            "description": "The Excalibur timer hooks into the internal timer and fires callbacks, after a certain interval, optionally repeating.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to be fired after the interval is complete.",
                    "type": "Callback"
                },
                {
                    "name": "repeats",
                    "description": "Indicates whether this call back should be fired only once, or repeat after every interval as completed.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ]
        },
        "Engine": {
            "name": "Engine",
            "shortname": "Engine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Core.ts",
            "line": 478,
            "description": "The 'Engine' is the main driver for a game. It is responsible for \nstarting/stopping the game, maintaining state, transmitting events, \nloading resources, and managing the scene.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "The width in pixels of the Excalibur game viewport",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "The height in pixels of the Excalibur game viewport",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "canvasElementId",
                    "description": "If this is not specified, then a new canvas will be created and inserted into the body.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "displayMode",
                    "description": "If this is not specified, then it will fall back to fixed if a height and width are specified, else the display mode will be FullScreen.",
                    "type": "DisplayMode",
                    "optional": true
                }
            ]
        },
        "IDrawable": {
            "name": "IDrawable",
            "shortname": "IDrawable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Drawing.ts",
            "line": 7,
            "description": "Interface for implementing anything in Excalibur that can be drawn to the screen."
        },
        "SpriteSheet": {
            "name": "SpriteSheet",
            "shortname": "SpriteSheet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Drawing.ts",
            "line": 97,
            "description": "SpriteSheets are a useful mechanism for slicing up image resources into\nseparate sprites or for generating in game animations. Sprites are organized\nin row major order in the SpriteSheet.",
            "contructor": "",
            "params": [
                {
                    "name": "image",
                    "description": "The backing image texture to build the SpriteSheet",
                    "type": "Texture"
                },
                {
                    "name": "columns",
                    "description": "The number of columns in the image texture",
                    "type": "Number"
                },
                {
                    "name": "rows",
                    "description": "The number of rows in the image texture",
                    "type": "Number"
                },
                {
                    "name": "spWidth",
                    "description": "The width of each individual sprite in pixels",
                    "type": "Number"
                },
                {
                    "name": "spHeight",
                    "description": "The height of each individual sprite in pixels",
                    "type": "Number"
                }
            ]
        },
        "SpriteFont": {
            "name": "SpriteFont",
            "shortname": "SpriteFont",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Drawing.ts",
            "line": 202,
            "description": "SpriteFonts are a used in conjunction with a {{#crossLink Label}}{{/crossLink}} to specify\na particular bitmap as a font.",
            "extends": "SpriteSheet",
            "is_constructor": 1,
            "params": [
                {
                    "name": "image",
                    "description": "The backing image texture to build the SpriteFont",
                    "type": "Texture"
                },
                {
                    "name": "alphabet",
                    "description": "A string representing all the charaters in the image, in row major order.",
                    "type": "String"
                },
                {
                    "name": "caseInsensitve",
                    "description": "Indicate whether this font takes case into account",
                    "type": "Boolean"
                },
                {
                    "name": "columns",
                    "description": "The number of columns of characters in the image",
                    "type": "Number"
                },
                {
                    "name": "rows",
                    "description": "The number of rows of characters in the image",
                    "type": "Number"
                },
                {
                    "name": "spWdith",
                    "description": "The width of each character in pixels",
                    "type": "Number"
                },
                {
                    "name": "spHeight",
                    "description": "The height of each character in pixels",
                    "type": "Number"
                }
            ]
        },
        "ISpriteEffect": {
            "name": "ISpriteEffect",
            "shortname": "ISpriteEffect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Drawing.ts",
            "line": 257,
            "description": "The interface that all sprite effects must implement"
        },
        "Effects.Grayscale": {
            "name": "Effects.Grayscale",
            "shortname": "Effects.Grayscale",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Drawing.ts",
            "line": 272,
            "description": "Applies the \"Grayscale\" effect to a sprite, removing color information.",
            "is_constructor": 1,
            "extends": "ISpriteEffect"
        },
        "Effects.Invert": {
            "name": "Effects.Invert",
            "shortname": "Effects.Invert",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Drawing.ts",
            "line": 289,
            "description": "Applies the \"Invert\" effect to a sprite, inverting the pixel colors.",
            "is_constructor": 1,
            "extends": "ISpriteEffect"
        },
        "Effects.Opacity": {
            "name": "Effects.Opacity",
            "shortname": "Effects.Opacity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Drawing.ts",
            "line": 305,
            "description": "Applies the \"Opacity\" effect to a sprite, setting the alpha of all pixels to a given value.",
            "extends": "ISpriteEffect",
            "is_constructor": 1,
            "params": [
                {
                    "name": "opacity",
                    "description": "The new opacity of the sprite from 0-255",
                    "type": "Number"
                }
            ]
        },
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Drawing.ts",
            "line": 325,
            "description": "A Sprite is one of the main drawing primitives. It is responsible for drawing\nimages or parts of images known as Textures to the screen.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "image",
                    "description": "The backing image texture to build the Sprite",
                    "type": "Texture"
                },
                {
                    "name": "sx",
                    "description": "The x position of the sprite",
                    "type": "Number"
                },
                {
                    "name": "sy",
                    "description": "The y position of the sprite",
                    "type": "Number"
                },
                {
                    "name": "swidth",
                    "description": "The width of the sprite in pixels",
                    "type": "Number"
                },
                {
                    "name": "sheight",
                    "description": "The height of the sprite in pixels",
                    "type": "Number"
                }
            ]
        },
        "Animation": {
            "name": "Animation",
            "shortname": "Animation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Drawing.ts",
            "line": 521,
            "description": "Animations allow you to display a series of images one after another,\ncreating the illusion of change. Generally these images will come from a sprite sheet source.",
            "extends": "IDrawable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "engine",
                    "description": "Reference to the current game engine",
                    "type": "Engine"
                },
                {
                    "name": "images",
                    "description": "An array of sprites to create the frames for the animation",
                    "type": "Sprite[]"
                },
                {
                    "name": "speed",
                    "description": "The number in milliseconds to display each frame in the animation",
                    "type": "Number"
                },
                {
                    "name": "loop",
                    "description": "Indicates whether the animation should loop after it is completed",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ]
        },
        "Polygon": {
            "name": "Polygon",
            "shortname": "Polygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Drawing.ts",
            "line": 664,
            "description": "Creates a closed polygon drawing given a list a of points. Polygons should be \nused sparingly as there is a <b>performance</b> impact for using them.",
            "extends": "IDrawable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "points",
                    "description": "The points to use to build the polygon in order",
                    "type": "Point[]"
                }
            ]
        },
        "Scene": {
            "name": "Scene",
            "shortname": "Scene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Entities.ts",
            "line": 10,
            "description": "Actors are composed together into groupings called Scenes in \nExcalibur. The metaphor models the same idea behind real world \nactors in a scene. Only actors in scenes will be updated and drawn.",
            "is_constructor": 1
        },
        "Side": {
            "name": "Side",
            "shortname": "Side",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Entities.ts",
            "line": 218,
            "description": "An enum that describes the sides of an Actor for collision"
        },
        "Actor": {
            "name": "Actor",
            "shortname": "Actor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Entities.ts",
            "line": 255,
            "description": "The most important primitive in Excalibur is an \"Actor.\" Anything that\ncan move on the screen, collide with another Actor, respond to events, \nor interact with the current scene, must be an actor. An Actor <b>must</b>\nbe part of a {{#crossLink \"Scene\"}}{{/crossLink}} for it to be drawn to the screen.",
            "extends": "Class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The starting x coordinate of the actor",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.0"
                },
                {
                    "name": "y",
                    "description": "The starting y coordinate of the actor",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.0"
                },
                {
                    "name": "width",
                    "description": "The starting width of the actor",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.0"
                },
                {
                    "name": "height",
                    "description": "The starting height of the actor",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0.0"
                },
                {
                    "name": "color",
                    "description": "The starting color of the actor",
                    "type": "Color",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ]
        },
        "Label": {
            "name": "Label",
            "shortname": "Label",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Entities.ts",
            "line": 1039,
            "description": "Labels are the way to draw small amounts of text to the screen in Excalibur. They are\nactors and inherit all of the benifits and capabilities.",
            "extends": "Actor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "The text of the label",
                    "type": "String",
                    "optional": true,
                    "optdefault": "empty"
                },
                {
                    "name": "x",
                    "description": "The x position of the label",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "The y position of the label",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "font",
                    "description": "Use any valid css font string for the label's font. Default is \"10px sans-serif\".",
                    "type": "String",
                    "optional": true,
                    "optdefault": "sans-serif"
                },
                {
                    "name": "spriteFont",
                    "description": "Use an Excalibur sprite font for the label's font, if a SpriteFont is provided it will take precendence over a css font.",
                    "type": "SpriteFont",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ]
        },
        "Trigger": {
            "name": "Trigger",
            "shortname": "Trigger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Entities.ts",
            "line": 1096,
            "description": "Triggers a method of firing arbitrary code on collision. These are useful\nas 'buttons', 'switches', or to trigger effects in a game. By defualt triggers\nare invisible, and can only be seen with debug mode enabled on the Engine.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The x position of the trigger",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "The y position of the trigger",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "width",
                    "description": "The width of the trigger",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "height",
                    "description": "The height of the trigger",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "action",
                    "description": "Callback to fire when trigger is activated",
                    "type": "()=>void",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "repeats",
                    "description": "The number of times that this trigger should fire, by default it is 1, if -1 is supplied it will fire indefinitely",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ]
        },
        "EventType": {
            "name": "EventType",
            "shortname": "EventType",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Events.ts",
            "line": 6,
            "description": "An enum representing all of the built in event types for Excalibur"
        },
        "EventDispatcher": {
            "name": "EventDispatcher",
            "shortname": "EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Events.ts",
            "line": 225,
            "description": "Excalibur's internal queueing event dispatcher. Callbacks are queued up and not fired until the update is called.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The object that will be the recipient of events from this event dispatcher",
                    "type": "Any"
                }
            ]
        },
        "ILoadable": {
            "name": "ILoadable",
            "shortname": "ILoadable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Loader.ts",
            "line": 6,
            "description": "An interface describing loadable resources in Excalibur"
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Loader.ts",
            "line": 34,
            "description": "The Texture object allows games built in Excalibur to load image resources.\nIt is generally recommended to preload images using the \"Texture\" object.",
            "extends": "ILoadable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "path",
                    "description": "Path to the image resource",
                    "type": "String"
                }
            ]
        },
        "Sound": {
            "name": "Sound",
            "shortname": "Sound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Loader.ts",
            "line": 101,
            "description": "The Sound object allows games built in Excalibur to load audio \ncomponents, from soundtracks to sound effects. It is generally \nrecommended to load sound resources when using Excalibur",
            "extends": "ILoadable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "...paths",
                    "description": "A list of audio sources (clip.wav, clip.mp3, clip.ogg) for this audio clip. This is done for browser compatibility.",
                    "type": "String[]"
                }
            ]
        },
        "Loader": {
            "name": "Loader",
            "shortname": "Loader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Loader.ts",
            "line": 217,
            "description": "The loader provides a mechanism to preload multiple resources at \none time. The loader must be passed to the engine in order to \ntrigger the loading progress bar",
            "extends": "ILoadable",
            "is_constructor": 1,
            "params": [
                {
                    "name": "loadables",
                    "description": "Optionally provide the list of resources you want to load at constructor time",
                    "type": "ILoadable[]",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ]
        },
        "LogLevel": {
            "name": "LogLevel",
            "shortname": "LogLevel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Log.ts",
            "line": 3,
            "description": "Logging level that Excalibur will tag"
        },
        "Logger": {
            "name": "Logger",
            "shortname": "Logger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Log.ts",
            "line": 40,
            "description": "Static singleton that represents the logging facility for Excalibur.\nExcalibur comes built-in with a ConsoleAppender and ScreenAppender.\nDerive from IAppender to create your own logging appenders.",
            "static": 1,
            "singleton": ""
        },
        "IAppender": {
            "name": "IAppender",
            "shortname": "IAppender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Log.ts",
            "line": 153,
            "description": "Contract for any log appender (such as console/screen)"
        },
        "ConsoleAppender": {
            "name": "ConsoleAppender",
            "shortname": "ConsoleAppender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Log.ts",
            "line": 168,
            "description": "Console appender for browsers (i.e. console.log)",
            "is_constructor": 1,
            "extends": "IAppender"
        },
        "ScreenAppender": {
            "name": "ScreenAppender",
            "shortname": "ScreenAppender",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Log.ts",
            "line": 199,
            "description": "On-screen (canvas) appender",
            "todo": [
                "Clean this up"
            ],
            "extends": "IAppender",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "Width of the screen appender in pixels",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height of the screen appender in pixels",
                    "type": "Number"
                }
            ]
        },
        "ParticleEmitter": {
            "name": "ParticleEmitter",
            "shortname": "ParticleEmitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Particles.ts",
            "line": 97,
            "description": "Using a particle emitter is a great way to create intersting effects \nin your game, like smoke, fire, water, explosions, etc. Particle Emitters\nextend Actor allowing you to use all the features that come with actor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The x position of the emitter",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "y",
                    "description": "The y position of the emitter",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "width",
                    "description": "The width of the emitter",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "height",
                    "description": "The height of the emitter",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ]
        },
        "PromiseState": {
            "name": "PromiseState",
            "shortname": "PromiseState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Promises.ts",
            "line": 5,
            "description": "Valid states for a promise to be in"
        },
        "Promise<T>": {
            "name": "Promise<T>",
            "shortname": "Promise<T>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Promises.ts",
            "line": 37,
            "description": "Promises/A+ spec implementation of promises",
            "is_constructor": 1
        },
        "Class": {
            "name": "Class",
            "shortname": "Class",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Util.ts",
            "line": 4,
            "description": "Excalibur base class",
            "is_constructor": 1
        },
        "Collection<T>": {
            "name": "Collection<T>",
            "shortname": "Collection<T>",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\ts\\Util.ts",
            "line": 145,
            "description": "Excaliburs dynamically resizing collection",
            "contsructor": "",
            "params": [
                {
                    "name": "initialSize",
                    "description": "Initial size of the internal backing array",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "200"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "..\\ts\\Algebra.ts",
            "line": 13,
            "description": "X Coordinate of the point",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Point"
        },
        {
            "file": "..\\ts\\Algebra.ts",
            "line": 17,
            "description": "Y Coordinate of the point",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Point"
        },
        {
            "file": "..\\ts\\Algebra.ts",
            "line": 36,
            "description": "The distance to another vector",
            "itemtype": "method",
            "name": "distance",
            "params": [
                {
                    "name": "v",
                    "description": "The other vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "number"
            },
            "class": "Vector"
        },
        {
            "file": "..\\ts\\Algebra.ts",
            "line": 49,
            "description": "Normalizes a vector to have a magnitude of 1.",
            "itemtype": "method",
            "name": "normalize",
            "return": {
                "description": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "..\\ts\\Algebra.ts",
            "line": 63,
            "description": "Scales a vector's by a factor of size",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "size",
                    "description": "The factor to scale the magnitude by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "..\\ts\\Algebra.ts",
            "line": 73,
            "description": "Adds one vector to another",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to add",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "..\\ts\\Algebra.ts",
            "line": 83,
            "description": "Subtracts a vector from the current vector",
            "itemtype": "method",
            "name": "minus",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to subtract",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "..\\ts\\Algebra.ts",
            "line": 93,
            "description": "Performs a dot product with another vector",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to dot",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "number"
            },
            "class": "Vector"
        },
        {
            "file": "..\\ts\\Algebra.ts",
            "line": 103,
            "description": "Performs a 2D cross product with another vector. 2D cross products return a scalar value not a vector.",
            "itemtype": "method",
            "name": "cross",
            "params": [
                {
                    "name": "v",
                    "description": "The vector to cross",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "number"
            },
            "class": "Vector"
        },
        {
            "file": "..\\ts\\Camera.ts",
            "line": 26,
            "description": "Sets the {{#crossLink Actor}}{{//crossLink}} to follow with the camera",
            "itemtype": "method",
            "name": "setActorToFollow",
            "params": [
                {
                    "name": "actor",
                    "description": "The actor to follow",
                    "type": "Actor"
                }
            ],
            "class": "Camera"
        },
        {
            "file": "..\\ts\\Camera.ts",
            "line": 35,
            "description": "Returns the focal point of the camera",
            "itemtype": "method",
            "name": "getFocus",
            "return": {
                "description": "Point"
            },
            "class": "Camera"
        },
        {
            "file": "..\\ts\\Camera.ts",
            "line": 46,
            "description": "Sets the camera to shake at the specified magnitude for the specified duration",
            "itemtype": "method",
            "name": "shake",
            "params": [
                {
                    "name": "magnitude",
                    "description": "the magnitude of the shake",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "the duration of the shake",
                    "type": "Number"
                }
            ],
            "class": "Camera"
        },
        {
            "file": "..\\ts\\Camera.ts",
            "line": 58,
            "description": "Applies the relevant transformations to the game canvas to \"move\" or apply effects to the Camera",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "delta",
                    "description": "The number of milliseconds since the last update",
                    "type": "Number"
                }
            ],
            "class": "Camera"
        },
        {
            "file": "..\\ts\\Camera.ts",
            "line": 112,
            "description": "Returns the focal point of the camera",
            "itemtype": "method",
            "name": "getFocus",
            "return": {
                "description": "Point"
            },
            "class": "TopCamera"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 18,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Black",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 25,
            "description": "Color constant",
            "itemtype": "property",
            "name": "White",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 32,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Yellow",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 39,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Orange",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 46,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Red",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 53,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Vermillion",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 60,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Rose",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 67,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Magenta",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 74,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Violet",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 81,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Blue",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 88,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Azure",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 95,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Cyan",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 102,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Viridian",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 109,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Green",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 116,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Chartreuse",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 123,
            "description": "Color constant",
            "itemtype": "property",
            "name": "Transparent",
            "type": "ex.Color",
            "static": 1,
            "final": 1,
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 145,
            "description": "Creates a new instance of Color from an r, g, b, a",
            "itemtype": "method",
            "name": "fromRGB",
            "static": 1,
            "params": [
                {
                    "name": "r",
                    "description": "The red component of color (0-255)",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "The green component of color (0-255)",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "The blue component of color (0-255)",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "The alpha component of color (0-1.0)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 159,
            "description": "Creates a new inscance of Color from a hex string",
            "itemtype": "method",
            "name": "fromHex",
            "static": 1,
            "params": [
                {
                    "name": "hex",
                    "description": "CSS color string of the form #ffffff, the alpha component is optional",
                    "type": "String"
                }
            ],
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 183,
            "description": "Returns a CSS string representation of a color.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "string"
            },
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 196,
            "description": "Returns a clone of the current color.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Color"
            },
            "class": "Color"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 212,
            "itemtype": "property",
            "name": "Num1",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 215,
            "itemtype": "property",
            "name": "Num2",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 218,
            "itemtype": "property",
            "name": "Num3",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 221,
            "itemtype": "property",
            "name": "Num4",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 224,
            "itemtype": "property",
            "name": "Num5",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 227,
            "itemtype": "property",
            "name": "Num6",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 230,
            "itemtype": "property",
            "name": "Num7",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 233,
            "itemtype": "property",
            "name": "Num8",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 236,
            "itemtype": "property",
            "name": "Num9",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 239,
            "itemtype": "property",
            "name": "Num0",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 252,
            "itemtype": "property",
            "name": "Numlock",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 256,
            "itemtype": "property",
            "name": "Semicolon",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 260,
            "itemtype": "property",
            "name": "A",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 263,
            "itemtype": "property",
            "name": "B",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 266,
            "itemtype": "property",
            "name": "C",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 269,
            "itemtype": "property",
            "name": "D",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 272,
            "itemtype": "property",
            "name": "E",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 275,
            "itemtype": "property",
            "name": "F",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 278,
            "itemtype": "property",
            "name": "G",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 281,
            "itemtype": "property",
            "name": "H",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 284,
            "itemtype": "property",
            "name": "I",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 287,
            "itemtype": "property",
            "name": "J",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 290,
            "itemtype": "property",
            "name": "K",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 293,
            "itemtype": "property",
            "name": "L",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 296,
            "itemtype": "property",
            "name": "M",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 299,
            "itemtype": "property",
            "name": "N",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 302,
            "itemtype": "property",
            "name": "O",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 305,
            "itemtype": "property",
            "name": "P",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 308,
            "itemtype": "property",
            "name": "Q",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 311,
            "itemtype": "property",
            "name": "R",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 314,
            "itemtype": "property",
            "name": "S",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 317,
            "itemtype": "property",
            "name": "T",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 320,
            "itemtype": "property",
            "name": "U",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 323,
            "itemtype": "property",
            "name": "V",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 326,
            "itemtype": "property",
            "name": "W",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 329,
            "itemtype": "property",
            "name": "X",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 332,
            "itemtype": "property",
            "name": "Y",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 335,
            "itemtype": "property",
            "name": "Z",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 364,
            "itemtype": "property",
            "name": "Shift",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 367,
            "itemtype": "property",
            "name": "Alt",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 370,
            "itemtype": "property",
            "name": "Up",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 373,
            "itemtype": "property",
            "name": "Down",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 376,
            "itemtype": "property",
            "name": "Left",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 379,
            "itemtype": "property",
            "name": "Right",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 382,
            "itemtype": "property",
            "name": "Space",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 385,
            "itemtype": "property",
            "name": "Esc",
            "type": "InputKey",
            "class": "InputKey"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 403,
            "description": "Show the game as full screen",
            "itemtype": "property",
            "name": "FullScreen",
            "type": "DisplayMode",
            "class": "DisplayMode"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 408,
            "description": "Scale the game to the parent DOM container",
            "itemtype": "property",
            "name": "Container",
            "type": "DisplayMode",
            "class": "DisplayMode"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 413,
            "description": "Show the game as a fixed size",
            "itemtype": "property",
            "name": "Fixed",
            "type": "DisplayMode",
            "class": "DisplayMode"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 449,
            "description": "Updates the timer after a certain number of milliseconds have elapsed. This is used internally by the engine.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "delta",
                    "description": "Number of elapsed milliseconds since the last update.",
                    "type": "Number"
                }
            ],
            "class": "Timer"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 466,
            "description": "Cancels the timer, preventing any further executions.",
            "itemtype": "method",
            "name": "cancel",
            "class": "Timer"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 491,
            "description": "Direct access to the engine's canvas element",
            "itemtype": "property",
            "name": "canvas",
            "type": "HTMLCanvasElement",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 496,
            "description": "Direct access to the engine's 2D rendering context",
            "itemtype": "property",
            "name": "ctx",
            "type": "CanvasRenderingContext2D",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 501,
            "description": "Direct access to the canvas element id, if an id exists",
            "itemtype": "property",
            "name": "canvasElementId",
            "type": "String",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 507,
            "description": "The width of the game canvas in pixels",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 512,
            "description": "The height of the game canvas in pixels",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 540,
            "description": "The default scene of the game, use {{#crossLink \"Engine/goToScene\"}}{{/crossLink}} to transition to different scenes.",
            "itemtype": "property",
            "name": "rootScene",
            "type": "Scene",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 549,
            "description": "Indicates whether the engine is set to fullscreen or not",
            "itemtype": "property",
            "name": "isFullscreen",
            "type": "Boolean",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 554,
            "description": "Indicates the current DisplayMode of the engine.",
            "itemtype": "property",
            "name": "[displayMode=FullScreen]",
            "type": "DisplayMode",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 559,
            "description": "Indicates whether the engine should draw with debug information",
            "itemtype": "property",
            "name": "[isDebug=false]",
            "type": "Boolean",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 565,
            "description": "Sets the background color for the engine.",
            "itemtype": "property",
            "name": "[backgroundColor=new Color(0, 0, 100)]",
            "type": "Color",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 622,
            "description": "Add an event listener. You can listen for a variety of\nevents off of the engine; see the events section below for a complete list.",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "eventName",
                    "description": "Name of the event to listen for",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Event handler for the thrown event",
                    "type": "Event=>void"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 633,
            "description": "Removes an event listener. If only the eventName is specified\nit will remove all handlers registered for that specific event. If the eventName\nand the handler instance are specified just that handler will be removed.",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "eventName",
                    "description": "Name of the event to listen for",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Event handler for the thrown event",
                    "type": "Event=>void",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 645,
            "description": "Plays a sprite animation on the screen at the specified x and y\n(in game coordinates, not screen pixels). These animations play\nindependent of actors, and will be cleaned up internally as soon\nas they are complete. Note animations that loop will never be\ncleaned up.",
            "itemtype": "method",
            "name": "playAnimation",
            "params": [
                {
                    "name": "animation",
                    "description": "Animation to play",
                    "type": "Animation"
                },
                {
                    "name": "x",
                    "description": "x game coordinate to play the animation",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y game coordinate to play the animation",
                    "type": "Number"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 659,
            "description": "Adds an actor to the current scene of the game. This is synonymous\nto calling engine.currentScene.addChild(actor : Actor).\n\nActors can only be drawn if they are a member of a scene, and only\nthe 'currentScene' may be drawn or updated.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "actor",
                    "description": "The actor to add to the current scene",
                    "type": "Actor"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 671,
            "description": "Removes an actor from the currentScene of the game. This is synonymous\nto calling engine.currentScene.removeChild(actor : Actor).\nActors that are removed from a scene will no longer be drawn or updated.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "actor",
                    "description": "The actor to remove from the current scene.",
                    "type": "Actor"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 683,
            "description": "Adds an excalibur timer to the current scene.",
            "params": [
                {
                    "name": "timer",
                    "description": "The timer to add to the current scene.",
                    "type": "Timer"
                }
            ],
            "itemtype": "method",
            "name": "addTimer",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 692,
            "description": "Removes an excalibur timer from the current scene.",
            "itemtype": "method",
            "name": "removeTimer",
            "params": [
                {
                    "name": "timer",
                    "description": "The timer to remove to the current scene.",
                    "type": "Timer"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 702,
            "description": "Adds a scene to the engine, think of scenes in excalibur as you\nwould scenes in a play.",
            "itemtype": "method",
            "name": "addScene",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the scene, must be unique",
                    "type": "String"
                },
                {
                    "name": "scene",
                    "description": "The scene to add to the engine",
                    "type": "Scene"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 717,
            "description": "Changes the currently updating and drawing scene to a different,\nnamed scene.",
            "itemtype": "method",
            "name": "goToScene",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the scene to trasition to.",
                    "type": "String"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 732,
            "description": "Returns the width of the engines drawing surface in pixels.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "number The width of the drawing surface in pixels."
            },
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 740,
            "description": "Returns the height of the engines drawing surface in pixels.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "number The height of the drawing surface in pixels."
            },
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 749,
            "description": "Transforms the current x, y from screen coordinates to world coordinates",
            "itemtype": "method",
            "name": "transformToCanvasCoordinates",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x",
                    "description": "X screen coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y screen coordinate",
                    "type": "Number"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 768,
            "description": "Sets the internal canvas height based on the selected display mode.",
            "itemtype": "method",
            "name": "setHeightByDisplayMode",
            "access": "private",
            "tagname": "",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 787,
            "description": "Initializes the internal canvas, rendering context, displaymode, and native event listeners",
            "itemtype": "method",
            "name": "initialize",
            "access": "private",
            "tagname": "",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 968,
            "description": "If supported by the browser, this will set the antialiasing flag on the\ncanvas. Set this to false if you want a 'jagged' pixel art look to your\nimage resources.",
            "itemtype": "method",
            "name": "setAntialiasing",
            "params": [
                {
                    "name": "isSmooth",
                    "description": "Set smoothing to true or false",
                    "type": "Boolean"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 983,
            "description": "Return the current smoothing status of the canvas",
            "itemtype": "method",
            "name": "getAntialiasing",
            "return": {
                "description": "boolean"
            },
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 992,
            "description": "Tests if a certain key is down.",
            "itemtype": "method",
            "name": "isKeyDown",
            "params": [
                {
                    "name": "key",
                    "description": "Test wether a key is down",
                    "type": "InputKey"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 1001,
            "description": "Tests if a certain key is pressed.",
            "itemtype": "method",
            "name": "isKeyPressed",
            "params": [
                {
                    "name": "key",
                    "description": "Test wether a key is pressed",
                    "type": "InputKey"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 1010,
            "description": "Tests if a certain key is up.",
            "itemtype": "method",
            "name": "isKeyUp",
            "params": [
                {
                    "name": "key",
                    "description": "Test wether a key is up",
                    "type": "InputKey"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 1019,
            "description": "Updates the entire state of the game",
            "itemtype": "method",
            "name": "update",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "delta",
                    "description": "Number of milliseconds elapsed since the last update.",
                    "type": "Number"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 1065,
            "description": "Draws the entire game",
            "itemtype": "method",
            "name": "draw",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "draw",
                    "description": "Number of milliseconds elapsed since the last draw.",
                    "type": "Number"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 1124,
            "description": "Starts the internal game loop for Excalibur after loading\nany provided assets.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "loader",
                    "description": "Optional resources to load before \nstarting the mainloop. Some loadable such as a Loader collection, Sound, or Texture.",
                    "type": "ILoadable",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "Promise"
            },
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 1172,
            "description": "Stops Excalibur's mainloop, useful for pausing the game.",
            "itemtype": "method",
            "name": "stop",
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 1183,
            "description": "Draws the Excalibur loading bar",
            "itemtype": "method",
            "name": "drawLoadingBar",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "ctx",
                    "description": "The canvas rendering context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "loaded",
                    "description": "Number of bytes loaded",
                    "type": "Number"
                },
                {
                    "name": "total",
                    "description": "Total number of bytes to load",
                    "type": "Number"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 1225,
            "description": "Sets the loading screen draw function if you want to customize the draw",
            "itemtype": "method",
            "name": "setLoadingDrawFunction",
            "params": [
                {
                    "name": "fcn",
                    "description": "\nCallback to draw the loading screen which is passed a rendering context, the number of bytes loaded, and the total number of bytes to load.",
                    "type": "Ctx: CanvasRenderingContext2D, loaded: number, total: number) => void"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Core.ts",
            "line": 1235,
            "description": "Another option available to you to load resources into the game. \nImmediately after calling this the game will pause and the loading screen\nwill appear.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "loader",
                    "description": "Some loadable such as a Loader collection, Sound, or Texture.",
                    "type": "ILoadable"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 12,
            "description": "Indicates whether the drawing is to be flipped vertically",
            "itemtype": "property",
            "name": "flipVertical",
            "type": "Boolean",
            "class": "IDrawable"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 17,
            "description": "Indicates whether the drawing is to be flipped horizontally",
            "itemtype": "property",
            "name": "flipHorizontal",
            "type": "Boolean",
            "class": "IDrawable"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 22,
            "description": "Indicates the width of the drawing in pixels",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "IDrawable"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 27,
            "description": "Indicates the height of the drawing in pixels",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "IDrawable"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 33,
            "description": "Adds a new {{#crossLink ISpriteEffect}}{{/crossLink}} to this drawing.",
            "itemtype": "method",
            "name": "addEffect",
            "params": [
                {
                    "name": "effect",
                    "description": "Effect to add to the this drawing",
                    "type": "ISpriteEffect"
                }
            ],
            "class": "IDrawable"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 39,
            "description": "Clears all effects from the drawing and return it to its original state.",
            "itemtype": "method",
            "name": "clearEffects",
            "class": "IDrawable"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 45,
            "description": "Sets the point about which to apply transformations to the drawing relative to the \ntop left corner of the drawing.",
            "itemtype": "method",
            "name": "transformAbotPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point about which to apply transformations",
                    "type": "Point"
                }
            ],
            "class": "IDrawable"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 53,
            "description": "Sets the scale trasformation",
            "itemtype": "method",
            "name": "setScale",
            "params": [
                {
                    "name": "scale",
                    "description": "The magnitude to scale the drawing",
                    "type": "Number"
                }
            ],
            "class": "IDrawable"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 60,
            "description": "Returns the current magnitude of the drawing's scale.",
            "itemtype": "method",
            "name": "getScale",
            "return": {
                "description": "number"
            },
            "class": "IDrawable"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 67,
            "description": "Sets the current rotation transformation for the drawing.",
            "itemtype": "method",
            "name": "setRotation",
            "params": [
                {
                    "name": "radians",
                    "description": "The rotation to apply to the drawing.",
                    "type": "Number"
                }
            ],
            "class": "IDrawable"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 74,
            "description": "Returns the current rotation for the drawing.",
            "itemtype": "method",
            "name": "getRotation",
            "return": {
                "description": "number"
            },
            "class": "IDrawable"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 81,
            "description": "Resets the internal state of the drawing (if any)",
            "itemtype": "method",
            "name": "reset",
            "class": "IDrawable"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 87,
            "description": "Draws the sprite appropriately to the 2D rendering context.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The 2D rendering context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "The x coordinate of where to draw",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of where to draw",
                    "type": "Number"
                }
            ],
            "class": "IDrawable"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 135,
            "description": "Create an animation from the this SpriteSheet by listing out the\nsprite indices. Sprites are organized in row major order in the SpriteSheet.",
            "itemtype": "method",
            "name": "getAnimationByIndices",
            "params": [
                {
                    "name": "engine",
                    "description": "Reference to the current game Engine",
                    "type": "Engine"
                },
                {
                    "name": "indices",
                    "description": "An array of sprite indices to use in the animation",
                    "type": "Number[]"
                },
                {
                    "name": "speed",
                    "description": "The number in milliseconds to display each frame in the animation",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Animation"
            },
            "class": "SpriteSheet"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 155,
            "description": "Create an animation from the this SpriteSheet by specifing the range of\nimages with the beginning and ending index",
            "itemtype": "method",
            "name": "getAnimationBetween",
            "params": [
                {
                    "name": "engine",
                    "description": "Reference to the current game Engine",
                    "type": "Engine"
                },
                {
                    "name": "beginIndex",
                    "description": "The index to start taking frames",
                    "type": "Number"
                },
                {
                    "name": "endIndex",
                    "description": "The index to stop taking frames",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "The number in milliseconds to display each frame in the animation",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Animation"
            },
            "class": "SpriteSheet"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 173,
            "description": "Treat the entire SpriteSheet as one animation, organizing the frames in \nrow major order.",
            "itemtype": "method",
            "name": "getAnimationForAll",
            "params": [
                {
                    "name": "engine",
                    "description": "Reference to the current game Engine",
                    "type": "Engine"
                },
                {
                    "name": "speed",
                    "description": "The number in milliseconds to display each frame the animation",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Animation"
            },
            "class": "SpriteSheet"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 188,
            "description": "Retreive a specific sprite from the SpriteSheet by its index. Sprites are organized\nin row major order in the SpriteSheet.",
            "itemtype": "method",
            "name": "getSprite",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the sprite",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Sprite"
            },
            "class": "SpriteSheet"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 229,
            "description": "Draw a particalur string to rendering context using this font",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The 2D rendering context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "The x position on the canvas to place the text",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position on the canvas to place the text",
                    "type": "Number"
                },
                {
                    "name": "text",
                    "description": "The text to write to the screen",
                    "type": "String"
                }
            ],
            "class": "SpriteFont"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 262,
            "description": "Should update individual pixels values",
            "itemtype": "method",
            "name": "updatePixel",
            "params": [
                {
                    "name": "x",
                    "description": "The pixel's x coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The pixel's y coordinate",
                    "type": "Number"
                },
                {
                    "name": "imageData",
                    "description": "The sprites raw pixel data",
                    "type": "ImageData"
                }
            ],
            "class": "ISpriteEffect"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 376,
            "description": "Adds a new {{#crossLink Effects.ISpriteEffect}}{{/crossLink}} to this drawing.",
            "itemtype": "method",
            "name": "addEffect",
            "params": [
                {
                    "name": "effect",
                    "description": "Effect to add to the this drawing",
                    "type": "Effects.ISpriteEffect"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 407,
            "description": "Clears all effects from the drawing and return it to its original state.",
            "itemtype": "method",
            "name": "clearEffects",
            "class": "Sprite"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 416,
            "description": "Sets the point about which to apply transformations to the drawing relative to the \ntop left corner of the drawing.",
            "itemtype": "method",
            "name": "transformAbotPoint",
            "params": [
                {
                    "name": "point",
                    "description": "The point about which to apply transformations",
                    "type": "Point"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 426,
            "description": "Sets the current rotation transformation for the drawing.",
            "itemtype": "method",
            "name": "setRotation",
            "params": [
                {
                    "name": "radians",
                    "description": "The rotation to apply to the drawing.",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 435,
            "description": "Returns the current rotation for the drawing in radians.",
            "itemtype": "method",
            "name": "getRotation",
            "return": {
                "description": "number"
            },
            "class": "Sprite"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 444,
            "description": "Sets the scale trasformation",
            "itemtype": "method",
            "name": "setScale",
            "params": [
                {
                    "name": "scale",
                    "description": "The magnitude to scale the drawing",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 453,
            "description": "Returns the current magnitude of the drawing's scale.",
            "itemtype": "method",
            "name": "getScale",
            "return": {
                "description": "number"
            },
            "class": "Sprite"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 462,
            "description": "Resets the internal state of the drawing (if any)",
            "itemtype": "method",
            "name": "reset",
            "class": "Sprite"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 470,
            "description": "Draws the sprite appropriately to the 2D rendering context, at an x and y coordinate.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The 2D rendering context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "x",
                    "description": "The x coordinate of where to draw",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinate of where to draw",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 506,
            "description": "Produces a copy of the current sprite",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Sprite"
            },
            "class": "Sprite"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 539,
            "description": "Indicates whether the animation should loop after it is completed",
            "itemtype": "property",
            "name": "[loop=false]",
            "type": "Boolean",
            "class": "Animation"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 603,
            "description": "Resets the animation to first frame.",
            "itemtype": "method",
            "name": "reset",
            "class": "Animation"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 611,
            "description": "Indicates whether the animation is complete, animations that loop are never complete.",
            "itemtype": "method",
            "name": "isDone",
            "return": {
                "description": "boolean"
            },
            "class": "Animation"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 620,
            "description": "Not meant to be called by game developers. Ticks the animation forward internally an\ncalculates whether to change to teh frame.",
            "itemtype": "method",
            "name": "tick",
            "class": "Animation"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 652,
            "description": "Plays an animation at an arbitrary location in the game.",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "x",
                    "description": "The x position in the game to play",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position in the game to play",
                    "type": "Number"
                }
            ],
            "class": "Animation"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 678,
            "description": "The color to use for the lines of the polygon",
            "itemtype": "property",
            "name": "lineColor",
            "type": "Color",
            "class": "Polygon"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 683,
            "description": "The color to use for the interior of the polygon",
            "itemtype": "property",
            "name": "fillColor",
            "type": "Color",
            "class": "Polygon"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 688,
            "description": "The width of the lines of the polygon",
            "itemtype": "property",
            "name": "[lineWidth=5]  The width of the lines in pixels",
            "type": "Number",
            "class": "Polygon"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 693,
            "description": "Indicates whether the polygon is filled or not.",
            "itemtype": "property",
            "name": "[filled=false]",
            "type": "Boolean",
            "class": "Polygon"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 727,
            "description": "Effects are <b>not supported</b> on polygons",
            "itemtype": "method",
            "name": "addEffect",
            "class": "Polygon"
        },
        {
            "file": "..\\ts\\Drawing.ts",
            "line": 735,
            "description": "Effects are <b>not supported</b> on polygons",
            "itemtype": "method",
            "name": "clearEffects",
            "class": "Polygon"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 18,
            "description": "The actors in the current scene",
            "itemtype": "property",
            "name": "children",
            "type": "Actor[]",
            "class": "Scene"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 34,
            "description": "This is called when the scene is made active and started. It is meant to be overriden,\nthis is where you should setup any DOM UI or event handlers needed for the scene.",
            "itemtype": "method",
            "name": "onActivate",
            "class": "Scene"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 43,
            "description": "This is called when the scene is made transitioned away from and stopped. It is meant to be overriden,\nthis is where you should cleanup any DOM UI or event handlers needed for the scene.",
            "itemtype": "method",
            "name": "onDeactivate",
            "class": "Scene"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 52,
            "description": "Publish an event to all actors in the scene",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "eventType",
                    "description": "The name of the event to publish",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "The event object to send",
                    "type": "GameEvent"
                }
            ],
            "class": "Scene"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 64,
            "description": "Updates all the actors and timers in the Scene. Called by the Engine.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "engine",
                    "description": "Reference to the current Engine",
                    "type": "Engine"
                },
                {
                    "name": "delta",
                    "description": "The number of milliseconds since the last update",
                    "type": "Number"
                }
            ],
            "class": "Scene"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 104,
            "description": "Draws all the actors in the Scene. Called by the Engine.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The current rendering context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "delta",
                    "description": "The number of milliseconds since the last draw",
                    "type": "Number"
                }
            ],
            "class": "Scene"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 121,
            "description": "Draws all the actors' debug information in the Scene. Called by the Engine.",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The current rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Scene"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 132,
            "description": "Adds an actor to the Scene, once this is done the actor will be drawn and updated.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "actor",
                    "description": "The actor to add",
                    "type": "Actor"
                }
            ],
            "class": "Scene"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 152,
            "description": "Removes an actor from the Scene, it will no longer be drawn or updated.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "actor",
                    "description": "The actor to remove",
                    "type": "Actor"
                }
            ],
            "class": "Scene"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 170,
            "description": "Adds a timer to the Scene",
            "itemtype": "method",
            "name": "addTimer",
            "params": [
                {
                    "name": "timer",
                    "description": "The timer to add",
                    "type": "Timer"
                }
            ],
            "return": {
                "description": "Timer"
            },
            "class": "Scene"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 182,
            "description": "Removes a timer to the Scene, can be dangerous",
            "itemtype": "method",
            "name": "removeTimer",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "timer",
                    "description": "The timer to remove",
                    "type": "Timer"
                }
            ],
            "return": {
                "description": "Timer"
            },
            "class": "Scene"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 195,
            "description": "Cancels a timer, removing it from the scene nicely",
            "itemtype": "method",
            "name": "cancelTimer",
            "params": [
                {
                    "name": "timer",
                    "description": "The timer to cancel",
                    "type": "Timer"
                }
            ],
            "return": {
                "description": "Timer"
            },
            "class": "Scene"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 206,
            "description": "Tests whether a timer is active in the scene",
            "itemtype": "method",
            "name": "isTimerActive",
            "params": [
                {
                    "name": "timer",
                    "description": "",
                    "type": "Timer"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "class": "Scene"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 223,
            "itemtype": "property",
            "name": "NONE",
            "type": "Side",
            "static": 1,
            "final": 1,
            "class": "Side"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 228,
            "itemtype": "property",
            "name": "TOP",
            "type": "Side",
            "static": 1,
            "final": 1,
            "class": "Side"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 233,
            "itemtype": "property",
            "name": "BOTTOM",
            "type": "Side",
            "static": 1,
            "final": 1,
            "class": "Side"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 238,
            "itemtype": "property",
            "name": "LEFT",
            "type": "Side",
            "static": 1,
            "final": 1,
            "class": "Side"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 243,
            "itemtype": "property",
            "name": "RIGHT",
            "type": "Side",
            "static": 1,
            "final": 1,
            "class": "Side"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 270,
            "description": "The x coordinate of the actor (left edge)",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 275,
            "description": "The y coordinate of the actor (top edge)",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 282,
            "description": "The rotation of the actor in radians",
            "itemtype": "property",
            "name": "rotation",
            "type": "Number",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 287,
            "description": "The rotational velocity of the actor in radians/second",
            "itemtype": "property",
            "name": "rx",
            "type": "Number",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 292,
            "description": "The scale of the actor",
            "itemtype": "property",
            "name": "scale",
            "type": "Number",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 297,
            "description": "The scalar velocity of the actor in scale/second",
            "itemtype": "property",
            "name": "sx",
            "type": "Number",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 302,
            "description": "The x velocity of the actor in pixels/second",
            "itemtype": "property",
            "name": "dx",
            "type": "Number",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 307,
            "description": "The x velocity of the actor in pixels/second",
            "itemtype": "property",
            "name": "dx",
            "type": "Number",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 314,
            "description": "The visibility of an actor",
            "itemtype": "property",
            "name": "invisible",
            "type": "Boolean",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 320,
            "description": "Direct access to the actor's action queue. Useful if you are building custom actions.",
            "itemtype": "property",
            "name": "actionQueue",
            "type": "ActionQueue",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 326,
            "description": "Direct access to the actor's event dispatcher.",
            "itemtype": "property",
            "name": "eventDispatcher",
            "type": "EventDispatcher",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 344,
            "description": "Access to the current drawing on for the actor, this can be an {{#crossLink \"Animation\"}}{{/crossLink}}, \n{{#crossLink \"Sprite\"}}{{/crossLink}}, or {{#crossLink \"Polygon\"}}{{/crossLink}}. \nSet drawings with the {{#crossLink \"Actor/setDrawing:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "currentDrawing",
            "type": "IDrawable",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 355,
            "description": "Sets the color of the actor. A rectangle of this color will be drawn if now IDrawable is specified as the actors drawing.",
            "itemtype": "property",
            "name": "color",
            "type": "Color",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 374,
            "description": "If the current actors is a member of the scene. This will remove\nit from the scene graph. It will no longer be drawn or updated.",
            "itemtype": "method",
            "name": "kill",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 386,
            "description": "Adds a child actor to this actor. All movement of the child actor will be\nrelative to the parent actor. Meaning if the parent moves the child will\nmove with",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "actor",
                    "description": "The child actor to add",
                    "type": "Actor"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 397,
            "description": "Removes a child actor from this actor.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "actor",
                    "description": "The child actor to remove",
                    "type": "Actor"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 406,
            "description": "Sets the current drawing of the actor to the drawing correspoding to\nthe key.",
            "itemtype": "method",
            "name": "setDrawing",
            "params": [
                {
                    "name": "key",
                    "description": "The key of the drawing",
                    "type": "String"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 420,
            "description": "Adds a drawing to the list of available drawings for an actor.",
            "itemtype": "method",
            "name": "addDrawing",
            "params": [
                {
                    "name": "key",
                    "description": "The key to associate with a drawing for this actor",
                    "type": "String"
                },
                {
                    "name": "drawing",
                    "description": "this can be an {{#crossLink \"Animation\"}}{{/crossLink}}, \n{{#crossLink \"Sprite\"}}{{/crossLink}}, or {{#crossLink \"Polygon\"}}{{/crossLink}}.",
                    "type": "IDrawable"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 434,
            "description": "Add an event listener. You can listen for a variety of\nevents off of the engine; see the events section below for a complete list.",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "eventName",
                    "description": "Name of the event to listen for",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Event handler for the thrown event",
                    "type": "Event=>void"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 444,
            "description": "Removes an event listener. If only the eventName is specified\nit will remove all handlers registered for that specific event. If the eventName\nand the handler instance are specified only that handler will be removed.",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "eventName",
                    "description": "Name of the event to listen for",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Event handler for the thrown event",
                    "type": "Event=>void",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 457,
            "description": "Artificially trigger an event on an actor, useful when creating custom events.",
            "itemtype": "method",
            "name": "triggerEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "The name of the event to trigger",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "The event object to pass to the callback",
                    "type": "GameEvent",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 467,
            "description": "Adds an actor to a collision group. Actors with no named collision group are\nconsidered to be in every collision group.\n\nOnce in a collision group(s) actors will only collide with other actors in \nthat group.",
            "itemtype": "method",
            "name": "addCollisionGroup",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the collision group",
                    "type": "String"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 484,
            "description": "Remove an actor from a collision group.",
            "itemtype": "method",
            "name": "removeCollisionGroup",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the collision group",
                    "type": "String"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 497,
            "description": "Get the center point of an actor",
            "itemtype": "method",
            "name": "getCenter",
            "return": {
                "description": "Vector"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 506,
            "description": "Gets the calculated width of an actor",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "number"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 515,
            "description": "Sets the width of an actor, factoring in the current scale",
            "itemtype": "method",
            "name": "setWidth",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 523,
            "description": "Gets the calculated height of an actor",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "number"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 532,
            "description": "Sets the height of an actor, factoring in the current scale",
            "itemtype": "method",
            "name": "setHeight",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 540,
            "description": "Centers the actor's drawing around the center of the actor's bounding box",
            "itemtype": "method",
            "name": "setCenterDrawing",
            "params": [
                {
                    "name": "center",
                    "description": "Indicates to center the drawing around the actor",
                    "type": "Boolean"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 550,
            "description": "Gets the left edge of the actor",
            "itemtype": "method",
            "name": "getLeft",
            "return": {
                "description": "number"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 559,
            "description": "Gets the right edge of the actor",
            "itemtype": "method",
            "name": "getRight",
            "return": {
                "description": "number"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 568,
            "description": "Gets the top edge of the actor",
            "itemtype": "method",
            "name": "getTop",
            "return": {
                "description": "number"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 577,
            "description": "Gets the bottom edge of the actor",
            "itemtype": "method",
            "name": "getBottom",
            "return": {
                "description": "number"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 616,
            "description": "Tests whether the x/y specified are contained in the actor",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "x",
                    "description": "X coordinate to test (in world coordinates)",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Y coordinate to test (in world coordinates)",
                    "type": "Number"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 626,
            "description": "Test whether the actor has collided with another actor, returns the side that collided.",
            "itemtype": "method",
            "name": "collides",
            "params": [
                {
                    "name": "actor",
                    "description": "The other actor to test",
                    "type": "Actor"
                }
            ],
            "return": {
                "description": "Side"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 664,
            "description": "Returns true if the two actors are less than or equal to the distance specified from each other",
            "itemtype": "method",
            "name": "within",
            "params": [
                {
                    "name": "actor",
                    "description": "Actor to test",
                    "type": "Actor"
                },
                {
                    "name": "distance",
                    "description": "Distance in pixels to test",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "boolean"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 675,
            "description": "Clears all queued actions from the Actor",
            "itemtype": "method",
            "name": "clearActions",
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 683,
            "description": "This method will move an actor to the specified x and y position at the \nspeed specified (in pixels per second) and return back the actor. This \nmethod is part of the actor 'Action' fluent API allowing action chaining.",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "x",
                    "description": "The x location to move the actor to",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y location to move the actor to",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "The speed in pixels per second to move",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Actor"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 698,
            "description": "This method will move an actor to the specified x and y position by a \ncertain time (in milliseconds). This method is part of the actor \n'Action' fluent API allowing action chaining.",
            "itemtype": "method",
            "name": "moveBy",
            "params": [
                {
                    "name": "x",
                    "description": "The x location to move the actor to",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y location to move the actor to",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "The time it should take the actor to move to the new location in milliseconds",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Actor"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 713,
            "description": "This method will rotate an actor to the specified angle at the speed\nspecified (in radians per second) and return back the actor. This \nmethod is part of the actor 'Action' fluent API allowing action chaining.",
            "itemtype": "method",
            "name": "rotateTo",
            "params": [
                {
                    "name": "angleRadians",
                    "description": "The angle to rotate to in radians",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "The angular velocity of the rotation specified in radians per second",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Actor"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 727,
            "description": "This method will rotate an actor to the specified angle by a certain\ntime (in milliseconds) and return back the actor. This method is part\nof the actor 'Action' fluent API allowing action chaining.",
            "itemtype": "method",
            "name": "rotateBy",
            "params": [
                {
                    "name": "angleRadians",
                    "description": "The angle to rotate to in radians",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "The time it should take the actor to complete the rotation in milliseconds",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Actor"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 741,
            "description": "This method will scale an actor to the specified size at the speed\nspecified (in magnitude increase per second) and return back the \nactor. This method is part of the actor 'Action' fluent API allowing \naction chaining.",
            "itemtype": "method",
            "name": "scaleTo",
            "params": [
                {
                    "name": "size",
                    "description": "The scaling factor to apply",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "The speed of scaling specified in magnitude increase per second",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Actor"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 756,
            "description": "This method will scale an actor to the specified size by a certain time\n(in milliseconds) and return back the actor. This method is part of the\nactor 'Action' fluent API allowing action chaining.",
            "itemtype": "method",
            "name": "scaleBy",
            "params": [
                {
                    "name": "size",
                    "description": "The scaling factor to apply",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "The time it should take to complete the scaling in milliseconds",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Actor"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 770,
            "description": "This method will cause an actor to blink (become visible and and \ninvisible) at a frequency (blinks per second) for a duration (in\nmilliseconds). Optionally, you may specify blinkTime, which indicates\nthe amount of time the actor is invisible during each blink.<br/>\nTo have the actor blink 3 times in 1 second, call actor.blink(3, 1000).<br/>\nThis method is part of the actor 'Action' fluent API allowing action chaining.",
            "itemtype": "method",
            "name": "blink",
            "params": [
                {
                    "name": "frequency",
                    "description": "The blinks per second",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "The total duration of the blinking specified in milliseconds",
                    "type": "Number"
                },
                {
                    "name": "blinkTime",
                    "description": "The amount of time each blink that the actor is visible in milliseconds",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "200"
                }
            ],
            "return": {
                "description": "Actor"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 788,
            "description": "This method will delay the next action from executing for a certain \namount of time (in milliseconds). This method is part of the actor \n'Action' fluent API allowing action chaining.",
            "itemtype": "method",
            "name": "delay",
            "params": [
                {
                    "name": "time",
                    "description": "The amount of time to delay the next action in the queue from executing in milliseconds",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Actor"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 801,
            "description": "This method will cause the actor to repeat all of the previously \ncalled actions a certain number of times. If the number of repeats \nis not specified it will repeat forever. This method is part of \nthe actor 'Action' fluent API allowing action chaining",
            "itemtype": "method",
            "name": "repeat",
            "params": [
                {
                    "name": "times",
                    "description": "The number of times to repeat all the previous actions in the action queue. If nothing is specified the actions will repeat forever",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "Actor"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 820,
            "description": "This method will cause the actor to repeat all of the previously \ncalled actions forever. This method is part of the actor 'Action'\nfluent API allowing action chaining.",
            "itemtype": "method",
            "name": "repeatForever",
            "return": {
                "description": "Actor"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 832,
            "description": "This method will cause the actor to follow another at a specified distance",
            "itemtype": "method",
            "name": "follow",
            "params": [
                {
                    "name": "actor",
                    "description": "The actor to follow",
                    "type": "Actor"
                },
                {
                    "name": "followDistance",
                    "description": "The distance to maintain when following, if not specified the actor will follow at the current distance.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "currentDistance"
                }
            ],
            "return": {
                "description": "Actor"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 848,
            "description": "This method will cause the actor to move towards another until they \ncollide \"meet\" at a specified speed.",
            "itemtype": "method",
            "name": "meet",
            "params": [
                {
                    "name": "actor",
                    "description": "The actor to meet",
                    "type": "Actor"
                },
                {
                    "name": "speed",
                    "description": "The speed in pixels per second to move, if not specified it will match the speed of the other actor",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Actor"
            },
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 865,
            "description": "Called by the Engine, updates the state of the actor",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "engine",
                    "description": "The reference to the current game engine",
                    "type": "Engine"
                },
                {
                    "name": "delta",
                    "description": "The time elapsed since the last update in milliseconds",
                    "type": "Number"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 975,
            "description": "Called by the Engine, draws the actor to the screen",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The rendering context",
                    "type": "CanvasRenderingContext2D"
                },
                {
                    "name": "delta",
                    "description": "The time since the last draw in milliseconds",
                    "type": "Number"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Entities.ts",
            "line": 1016,
            "description": "Called by the Engine, draws the actors debugging to the screen",
            "itemtype": "method",
            "name": "debugDraw",
            "params": [
                {
                    "name": "ctx",
                    "description": "The rendering context",
                    "type": "CanvasRenderingContext2D"
                }
            ],
            "class": "Actor"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 11,
            "itemtype": "property",
            "name": "KeyDown",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 16,
            "itemtype": "property",
            "name": "KeyUp",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 21,
            "itemtype": "property",
            "name": "KeyPress",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 26,
            "itemtype": "property",
            "name": "MouseDown",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 31,
            "itemtype": "property",
            "name": "MouseMove",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 36,
            "itemtype": "property",
            "name": "MouseUp",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 41,
            "itemtype": "property",
            "name": "TouchStart",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 46,
            "itemtype": "property",
            "name": "TouchMove",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 51,
            "itemtype": "property",
            "name": "TouchEnd",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 56,
            "itemtype": "property",
            "name": "TouchCancel",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 61,
            "itemtype": "property",
            "name": "Click",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 66,
            "itemtype": "property",
            "name": "UserEvent",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 71,
            "itemtype": "property",
            "name": "Blur",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 76,
            "itemtype": "property",
            "name": "Focus",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 81,
            "itemtype": "property",
            "name": "Update",
            "type": "EventType",
            "static": 1,
            "final": 1,
            "class": "EventType"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 240,
            "description": "Publish an event for target",
            "itemtype": "method",
            "name": "publish",
            "params": [
                {
                    "name": "eventName",
                    "description": "The name of the event to publish",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "Optionally pass an event data object to the handler",
                    "type": "GameEvent",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "class": "EventDispatcher"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 263,
            "description": "Subscribe an event handler to a particular event name, multiple handlers per event name are allowed.",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "eventName",
                    "description": "The name of the event to subscribe to",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The handler callback to fire on this event",
                    "type": "GameEvent=>void"
                }
            ],
            "class": "EventDispatcher"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 277,
            "description": "Unsubscribe a event handler(s) from an event. If a specific handler\nis specified for an event, only that handler will be unsubscribed. \nOtherwise all handlers will be unsubscribed for that event.",
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "eventName",
                    "description": "The name of the event to unsubscribe",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Optionally the specific handler to unsubscribe",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "class": "EventDispatcher"
        },
        {
            "file": "..\\ts\\Events.ts",
            "line": 301,
            "description": "Dispatches all queued events to their handlers for execution.",
            "itemtype": "method",
            "name": "update",
            "class": "EventDispatcher"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 11,
            "description": "Begins loading the resource and returns a promise to be resolved on completion",
            "itemtype": "method",
            "name": "load",
            "return": {
                "description": "Promise&lt;any&gt;"
            },
            "class": "ILoadable"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 17,
            "description": "onprogress handler",
            "itemtype": "property",
            "name": "onprogress",
            "type": "Any=>void",
            "class": "ILoadable"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 22,
            "description": "oncomplete handler",
            "itemtype": "property",
            "name": "oncomplete",
            "type": "Any=>void",
            "class": "ILoadable"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 27,
            "description": "onerror handler",
            "itemtype": "property",
            "name": "onerror",
            "type": "Any=>void",
            "class": "ILoadable"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 45,
            "description": "Populated once loading is complete",
            "itemtype": "property",
            "name": "image",
            "type": "HTMLImageElement",
            "class": "Texture"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 63,
            "description": "Begins loading the texture and returns a promise to be resolved on completion",
            "itemtype": "method",
            "name": "load",
            "return": {
                "description": "Promise&lt;HTMLImageElement&gt;"
            },
            "class": "Texture"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 121,
            "description": "Populated once loading is complete",
            "itemtype": "property",
            "name": "sound",
            "type": "Sound",
            "class": "Sound"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 161,
            "description": "Sets the volume of the sound clip",
            "itemtype": "method",
            "name": "setVolume",
            "params": [
                {
                    "name": "volume",
                    "description": "A volume value between 0-1.0",
                    "type": "Number"
                }
            ],
            "class": "Sound"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 170,
            "description": "Indicates whether the clip should loop when complete",
            "itemtype": "method",
            "name": "setLoop",
            "params": [
                {
                    "name": "loop",
                    "description": "Set the looping flag",
                    "type": "Boolean"
                }
            ],
            "class": "Sound"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 179,
            "description": "Play the sound",
            "itemtype": "method",
            "name": "play",
            "class": "Sound"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 187,
            "description": "Stop the sound and rewind",
            "itemtype": "method",
            "name": "stop",
            "class": "Sound"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 195,
            "description": "Begins loading the sound and returns a promise to be resolved on completion",
            "itemtype": "method",
            "name": "load",
            "return": {
                "description": "Promise&lt;Sound&gt;"
            },
            "class": "Sound"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 241,
            "description": "Add a resource to the loader to load",
            "itemtype": "method",
            "name": "addResource",
            "params": [
                {
                    "name": "loadable",
                    "description": "Resource to add",
                    "type": "ILoadable"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 254,
            "description": "Add a list of resources to the loader to load",
            "itemtype": "method",
            "name": "addResources",
            "params": [
                {
                    "name": "loadables",
                    "description": "The list of resources to load",
                    "type": "ILoadable[]"
                }
            ],
            "class": "Loader"
        },
        {
            "file": "..\\ts\\Loader.ts",
            "line": 274,
            "description": "Begin loading all of the supplied resources, returning a promise that resolves when loading of all is complete",
            "itemtype": "method",
            "name": "load",
            "return": {
                "description": "Promsie&lt;any&gt;"
            },
            "class": "Loader"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 8,
            "itemtype": "property",
            "name": "Debug",
            "type": "LogLevel",
            "static": 1,
            "final": 1,
            "class": "LogLevel"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 13,
            "itemtype": "property",
            "name": "Info",
            "type": "LogLevel",
            "static": 1,
            "final": 1,
            "class": "LogLevel"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 18,
            "itemtype": "property",
            "name": "Warn",
            "type": "LogLevel",
            "static": 1,
            "final": 1,
            "class": "LogLevel"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 23,
            "itemtype": "property",
            "name": "Error",
            "type": "LogLevel",
            "static": 1,
            "final": 1,
            "class": "LogLevel"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 28,
            "itemtype": "property",
            "name": "Fatal",
            "type": "LogLevel",
            "static": 1,
            "final": 1,
            "class": "LogLevel"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 59,
            "description": "Gets or sets the default logging level. Excalibur will only log \nmessages if equal to or above this level.",
            "itemtype": "property",
            "name": "defaultLevel",
            "type": "LogLevel",
            "class": "Logger"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 66,
            "description": "Gets the current static instance of Logger",
            "itemtype": "method",
            "name": "getInstance",
            "static": 1,
            "return": {
                "description": "Logger"
            },
            "class": "Logger"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 79,
            "description": "Adds a new IAppender to the list of appenders to write to",
            "itemtype": "method",
            "name": "addAppender",
            "params": [
                {
                    "name": "appender",
                    "description": "Appender to add",
                    "type": "IAppender"
                }
            ],
            "class": "Logger"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 88,
            "description": "Logs a message at a given LogLevel",
            "itemtype": "method",
            "name": "_log",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "level",
                    "description": "The LogLevel`to log the message at",
                    "type": "LogLevel"
                },
                {
                    "name": "args",
                    "description": "An array of arguments to write to an appender"
                }
            ],
            "class": "Logger"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 107,
            "description": "Writes a log message at the LogLevel.Debug level",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "...args",
                    "description": "Accepts any number of arguments"
                }
            ],
            "class": "Logger"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 116,
            "description": "Writes a log message at the LogLevel.Info level",
            "itemtype": "method",
            "name": "info",
            "params": [
                {
                    "name": "...args",
                    "description": "Accepts any number of arguments"
                }
            ],
            "class": "Logger"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 125,
            "description": "Writes a log message at the LogLevel.Warn level",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "...args",
                    "description": "Accepts any number of arguments"
                }
            ],
            "class": "Logger"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 134,
            "description": "Writes a log message at the LogLevel.Error level",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "...args",
                    "description": "Accepts any number of arguments"
                }
            ],
            "class": "Logger"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 143,
            "description": "Writes a log message at the LogLevel.Fatal level",
            "itemtype": "method",
            "name": "fatal",
            "params": [
                {
                    "name": "...args",
                    "description": "Accepts any number of arguments"
                }
            ],
            "class": "Logger"
        },
        {
            "file": "..\\ts\\Log.ts",
            "line": 159,
            "description": "Logs a message at the given LogLevel",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "level",
                    "description": "Level to log at",
                    "type": "LogLevel"
                },
                {
                    "name": "args",
                    "description": "Arguments to log",
                    "type": "Any[]"
                }
            ],
            "class": "IAppender"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 112,
            "description": "Gets or sets the isEmitting flag",
            "itemtype": "property",
            "name": "isEmitting",
            "type": "Boolean",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 117,
            "description": "Gets or sets the backing particle collection",
            "itemtype": "property",
            "name": "particles",
            "type": "Util.Collection&lt;Particle&gt;",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 123,
            "description": "Gets or sets the backing deadParticle collection",
            "itemtype": "property",
            "name": "particles",
            "type": "Util.Collection&lt;Particle&gt;",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 129,
            "description": "Gets or sets the minimum partical velocity",
            "itemtype": "property",
            "name": "[minVel=0]",
            "type": "Number",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 134,
            "description": "Gets or sets the maximum partical velocity",
            "itemtype": "property",
            "name": "[maxVel=0]",
            "type": "Number",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 140,
            "description": "Gets or sets the acceleration vector for all particles",
            "itemtype": "property",
            "name": "[acceleration=new Vector(0,0)]",
            "type": "Vector",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 146,
            "description": "Gets or sets the minimum angle in radians",
            "itemtype": "property",
            "name": "[minAngle=0]",
            "type": "Number",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 151,
            "description": "Gets or sets the maximum angle in radians",
            "itemtype": "property",
            "name": "[maxAngle=0]",
            "type": "Number",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 157,
            "description": "Gets or sets the emission rate for particles (particles/sec)",
            "itemtype": "property",
            "name": "[emitRate=1]",
            "type": "Number",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 162,
            "description": "Gets or sets the life of each particle in milliseconds",
            "itemtype": "property",
            "name": "[particleLife=2000]",
            "type": "Number",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 167,
            "description": "Gets or sets the opacity of each particle from 0 to 1.0",
            "itemtype": "property",
            "name": "[opacity=1.0]",
            "type": "Number",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 172,
            "description": "Gets or sets the fade flag which causes partilces to gradually fade out over the course of their life.",
            "itemtype": "property",
            "name": "[fade=false]",
            "type": "Boolean",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 178,
            "description": "Gets or sets the optional focus where all particles should accelerate towards",
            "itemtype": "property",
            "name": "[focus=null]",
            "type": "Vector",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 183,
            "description": "Gets or sets the acceleration for focusing particles if a focus has been specified",
            "itemtype": "property",
            "name": "[focusAccel=1]",
            "type": "Number",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 189,
            "description": "Gets or sets the minimum size of all particles",
            "itemtype": "property",
            "name": "[minSize=5]",
            "type": "Number",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 194,
            "description": "Gets or sets the maximum size of all particles",
            "itemtype": "property",
            "name": "[maxSize=5]",
            "type": "Number",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 200,
            "description": "Gets or sets the beginning color of all particles",
            "itemtype": "property",
            "name": "[beginColor=Color.White]",
            "type": "Color",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 205,
            "description": "Gets or sets the ending color of all particles",
            "itemtype": "property",
            "name": "[endColor=Color.White]",
            "type": "Color",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 211,
            "description": "Gets or sets the sprite that a particle should use",
            "itemtype": "property",
            "name": "[particleSprite=null]",
            "type": "Sprite",
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Particles.ts",
            "line": 228,
            "description": "Causes the emitter to emit particles",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "particleCount",
                    "description": "Number of particles to emit right now",
                    "type": "Number"
                }
            ],
            "class": "ParticleEmitter"
        },
        {
            "file": "..\\ts\\Promises.ts",
            "line": 10,
            "itemtype": "property",
            "name": "Resolved",
            "type": "PromiseState",
            "class": "PromiseState"
        },
        {
            "file": "..\\ts\\Promises.ts",
            "line": 14,
            "itemtype": "property",
            "name": "Rejected",
            "type": "PromiseState",
            "class": "PromiseState"
        },
        {
            "file": "..\\ts\\Promises.ts",
            "line": 18,
            "itemtype": "property",
            "name": "Pending",
            "type": "PromiseState",
            "class": "PromiseState"
        },
        {
            "file": "..\\ts\\Promises.ts",
            "line": 50,
            "description": "Wrap a value in a resolved promise",
            "itemtype": "method",
            "name": "wrap<T>",
            "params": [
                {
                    "name": "value",
                    "description": "An optional value to wrap in a resolved promise",
                    "type": "T",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "Promise&lt;T&gt;"
            },
            "class": "Promise<T>"
        },
        {
            "file": "..\\ts\\Promises.ts",
            "line": 64,
            "description": "Chain success and reject callbacks after the promise is resovled",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "successCallback",
                    "description": "Call on resolution of promise",
                    "type": "T=>any"
                },
                {
                    "name": "rejectCallback",
                    "description": "Call on rejection of promise",
                    "type": "Any=>any"
                }
            ],
            "return": {
                "description": "Promise&lt;T&gt;"
            },
            "class": "Promise<T>"
        },
        {
            "file": "..\\ts\\Promises.ts",
            "line": 100,
            "description": "Add an error callback to the promise",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "errorCallback",
                    "description": "Call if there was an error in a callback",
                    "type": "Any=>any"
                }
            ],
            "return": {
                "description": "Promise&lt;T&gt;"
            },
            "class": "Promise<T>"
        },
        {
            "file": "..\\ts\\Promises.ts",
            "line": 113,
            "description": "Resolve the promise and pass an option value to the success callbacks",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "value",
                    "description": "Value to pass to the success callbacks",
                    "type": "T",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "class": "Promise<T>"
        },
        {
            "file": "..\\ts\\Promises.ts",
            "line": 136,
            "description": "Reject the promise and pass an option value to the reject callbacks",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "value",
                    "description": "Value to pass to the reject callbacks",
                    "type": "T",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "class": "Promise<T>"
        },
        {
            "file": "..\\ts\\Promises.ts",
            "line": 156,
            "description": "Inpect the current state of a promise",
            "itemtype": "method",
            "name": "state",
            "return": {
                "description": "PromiseState"
            },
            "class": "Promise<T>"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 11,
            "description": "You may wish to extend native Excalibur functionality. Any method on \nactor may be extended to support additional functionaliy. In the \nexample below we create a new type called \"MyActor\"\n<br/><b>Example</b><pre>var MyActor = Actor.extend({\n  init : function(){ // custom initializer },\n  update : function(engine, delta){\n     // Implement custom update \n\n        // Call super constructor update\n        this.super.update.call(this, engine, delta);\n        console.log(\"Something cool!\");\n  }\n});\nvar myActor = new MyActor(100, 100, 100, 100, Color.Azure);</pre>",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "methods",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Class"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 152,
            "description": "Default collection size",
            "itemtype": "property",
            "name": "DefaultSize",
            "type": "Number",
            "static": 1,
            "final": 1,
            "class": "Collection<T>"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 180,
            "description": "Push elements to the end of the collection",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "T"
                }
            ],
            "return": {
                "description": "T"
            },
            "class": "Collection<T>"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 193,
            "description": "Removes elements from the end of the collection",
            "itemtype": "method",
            "name": "pop",
            "return": {
                "description": "T"
            },
            "class": "Collection<T>"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 203,
            "description": "Returns the count of the collection",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "number"
            },
            "class": "Collection<T>"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 212,
            "description": "Empties the collection",
            "itemtype": "method",
            "name": "clear",
            "class": "Collection<T>"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 220,
            "description": "Returns the size of the internal backing array",
            "itemtype": "method",
            "name": "internalSize",
            "return": {
                "description": "number"
            },
            "class": "Collection<T>"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 229,
            "description": "Returns an element at a specific index",
            "itemtype": "method",
            "name": "elementAt",
            "params": [
                {
                    "name": "index",
                    "description": "Index of element to retreive",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "T"
            },
            "class": "Collection<T>"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 242,
            "description": "Inserts an element at a specific index",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "index",
                    "description": "Index to insert the element",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "T"
            },
            "class": "Collection<T>"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 255,
            "description": "Removes an element at a specific index",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "index",
                    "description": "Index of element to remove",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "T"
            },
            "class": "Collection<T>"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 273,
            "description": "Removes an element by reference",
            "itemtype": "method",
            "name": "removeElement",
            "params": [
                {
                    "name": "element",
                    "description": "Index of element to retreive",
                    "type": "T"
                }
            ],
            "class": "Collection<T>"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 283,
            "description": "Returns a array representing the collection",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "T[]"
            },
            "class": "Collection<T>"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 292,
            "description": "Iterate over every element in the collection",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "func",
                    "description": "Callback to call for each element passing a reference to the element and its index, returned values are ignored",
                    "type": "(T,number)=>any"
                }
            ],
            "class": "Collection<T>"
        },
        {
            "file": "..\\ts\\Util.ts",
            "line": 304,
            "description": "Mutate every element in the collection",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "func",
                    "description": "Callback to call for each element passing a reference to the element and its index, any values returned mutate the collection",
                    "type": "(T,number)=>any"
                }
            ],
            "class": "Collection<T>"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Algebra.ts:36"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Algebra.ts:63"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Algebra.ts:73"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Algebra.ts:83"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Algebra.ts:93"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Algebra.ts:103"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Camera.ts:35"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Camera.ts:112"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Core.ts:183"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Core.ts:196"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Core.ts:732"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Core.ts:740"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Core.ts:983"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Core.ts:992"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Core.ts:1001"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Core.ts:1010"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Core.ts:1124"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Drawing.ts:60"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Drawing.ts:74"
        },
        {
            "message": "unknown tag: contructor",
            "line": " ..\\ts\\Drawing.ts:97"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Drawing.ts:135"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Drawing.ts:155"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Drawing.ts:173"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Drawing.ts:188"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Drawing.ts:435"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Drawing.ts:453"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Drawing.ts:506"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Drawing.ts:611"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ..\\ts\\Drawing.ts:664"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:170"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:182"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:195"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:206"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:497"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:506"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:523"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:550"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:559"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:568"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:577"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:626"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:664"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:683"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:698"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:713"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:727"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:741"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:756"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:770"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:788"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:801"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:820"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:832"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Entities.ts:848"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Loader.ts:11"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " ..\\ts\\Loader.ts:34"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Loader.ts:63"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " ..\\ts\\Loader.ts:101"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Loader.ts:195"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " ..\\ts\\Loader.ts:217"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Loader.ts:274"
        },
        {
            "message": "unknown tag: singleton",
            "line": " ..\\ts\\Log.ts:40"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Log.ts:66"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Promises.ts:50"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Promises.ts:64"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Promises.ts:100"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Promises.ts:156"
        },
        {
            "message": "unknown tag: contsructor",
            "line": " ..\\ts\\Util.ts:145"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Util.ts:180"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Util.ts:193"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Util.ts:203"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Util.ts:220"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Util.ts:229"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Util.ts:242"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Util.ts:255"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\ts\\Util.ts:283"
        }
    ]
}